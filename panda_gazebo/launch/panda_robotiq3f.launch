<?xml version="1.0" encoding="utf-8"?>
<launch>
  <!--========================================================================================-->
  <!-- load_gripper-->
  <!-- use_custom_action_servers-->
  <!-- start_moveit-->
  <!-- load_demo_planning_scene-->
  <!-- paused-->
  <!-- use_sim_time-->
  <!-- gui-->
  <!-- headless-->
  <!-- debug-->
  <!-- ns-->
  <!-- static:               This argument fixes the robot statically to the world-->
  <!-- load_gazebo:          This argument dictates whether gazebo should be launched in this file-->
  <!-- initial_joint_states: This argument sets the initial joint states-->
  <!-- -->
  <!-- -->
  <!--========================================================================================-->
  <arg name="arm_name"                  default="panda"/>
  <arg name="hand_name"                 default="hithand"/>
  <arg name="no_end_effector"           default="false"/>
  <arg name="load_gripper"              default="false"/> 
  <arg name="load_hand"                 default="false" /> 
  <arg name="load_robotiq"                 default="true" />
  <arg name="paused"                    default="false"/>
  <arg name="use_sim_time"              default="true" />
  <arg name="use_custom_action_servers" default="false" />
  <arg name="gui"                       default="true" />
  <arg name="headless"                  default="false"/>
  <arg name="debug"                     default="false"/>
  <arg name="load_demo_planning_scene"  default="false"/>

  <arg name="state_rate"                default="100"/>

  <arg name="use_dart"                  default="true"/>

  <arg name="realsense"                 default="d415"/>
  <arg name="object_datasets_folder"    default="/home/david/object_datasets"/>
  <arg name="launch_rosbridge"          default="false"/>
  <arg name="register_depth"            default="false"/> 
  <arg name="vis_hithand_effort"        default="false"/>
  <arg name="vis_hithand_position"      default="false"/>
  <arg name="vis_hithand_velocity"      default="false"/>

  <!-- Index Little Middle Ring Thumb -->

  <!-- ================================================================================== -->
  <!-- Set robot name based on end-effector (different based on actuated/non-actuated EE) -->
  <arg name="robot_name" if="$(arg load_hand)"
       value="$(arg arm_name)_$(arg hand_name)"/>
  <arg name="robot_name" unless="$(arg load_hand)"
       value="$(arg arm_name)"/>
  <!-- ================================================================================== -->

  <!-- Launch an empty world with ODE physics solver -->
  <include unless="$(arg use_dart)" file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name"   value="$(find panda_gazebo)/worlds/panda.world"/>
    <arg name="debug"        value="$(arg debug)" />
    <arg name="gui"          value="$(arg gui)" />
    <arg name="paused"       value="$(arg paused)"/>
    <arg name="headless"     value="$(arg headless)"/>
  </include> 


  <!-- Launch an empty world with DART physics engine  -->
  <include if="$(arg use_dart)" file="$(find panda_gazebo)/launch/empty_world_dart.launch">
    <arg name="gui"      value="$(arg gui)"/>
	  <arg name="paused"   value="$(arg paused)"/>
  </include>


  <!-- Load parameters to ROS parameter server-->
  <rosparam command="load" file="$(find panda_gazebo)/config/robot_details.yaml"/>

  <param name="object_datasets_folder"   value="$(arg object_datasets_folder)"/>
  <param name="robot_name" type="str"    value="$(arg robot_name)"/>
  <param name="hand_name"  type="str"    value="hithand"/>
  <param name="/arm/root_name"           value="panda_link0"/>
  <param name="/arm/tip_name"            value="hithand" 
    if="$(arg load_hand)" />

  <param name="/arm/tip_name"            value="panda_hand" 
	 if="$(arg load_gripper)"    />

  <param name="/arm/tip_name"            value="panda_hand"
  if="$(arg load_robotiq)"    />

  <param name="/arm/tip_name"            value="panda_link8"
	 if="$(arg no_end_effector)" />

  <!--<param name="/franka_gripper/robot_ip" value="sim" 
	 unless="$(arg no_end_effector)"    /> -->

  <param name="/arm/gravity_tip_name"    value="hithand"
	 if="$(arg load_hand)" />
  <param name="/arm/gravity_tip_name"    value="panda_hand" 
	 if="$(arg load_gripper)" />
  <param name="/arm/gravity_tip_name"    value="panda_link8" 
	 if="$(arg no_end_effector)" />


  <!-- Load the robot and end effector URDF-->	
  <param name="robot_description" command="
	$(find xacro)/xacro '$(find franka_panda_description)/robots/panda_arm_hand.urdf.xacro'
	load_gripper:=$(arg load_gripper)
  load_robotiq:=$(arg load_robotiq)
	load_hand:=$(arg load_hand)
	realsense:=$(arg realsense)
	--inorder"/>

  <!-- Spawn urdf of the robot -->
  <node name="robot_description" pkg="gazebo_ros" type="spawn_model" 
	args="-urdf -param robot_description -model $(arg robot_name)
	      -robot_namespace $(arg robot_name)"
        respawn="false" output="screen" />

  <!-- create a tf with base frame as 'base' (to match aml_robot) -->
  <node name="base_to_link0" pkg="tf" type="static_transform_publisher"
        args="0 0 0 0 0 0 1 base panda_link0 100" />
  <node name="world_to_base" pkg="tf" type="static_transform_publisher"
	args="0 0 0 0 0 0 1 world base 100" />

  <!-- from src/robotiq/robotiq_3f_gripper_visualization/launch/robotiq_gripper_upload.launch -->
  <!-- <param name="robotiq_description" command="$(find xacro)/xacro.py '$(find robotiq_3f_gripper_visualization)/cfg/robotiq-3f-gripper_articulated.xacro'" /> -->
  <!-- <param name="robotiq_description" command="$(find xacro)/xacro '$(find robotiq_3f_gripper_visualization)/cfg/robotiq_hand.xacro'" /> -->
  <!-- <node pkg="robot_state_publisher" type="state_publisher" name="robotiq_hands_l_hand_robot_state_publisher">
    <param name="publish_frequency" type="double" value="50.0" />
    <remap from="joint_states" to="/robotiq_hands/left_hand/joint_states" />
  </node> -->

      <!-- spawn in gazebo -->
  <!-- <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robotiq_description -model robotiq_3f -z 0.1" respawn="false" output="screen" /> -->


  <!-- ++++++++++++++++++ Controllers +++++++++++++++++++ -->
  <!-- Panda arm controller -->
  <include file="$(find panda_sim_controllers)/launch/panda_control.launch">
	<arg name="gui"               value="$(arg gui)" />
	<arg name="load_gripper"      value="$(arg load_gripper)" />
	<arg name="load_hand"         value="$(arg load_hand)" />
  </include>

  <group if="$(eval arg('use_custom_action_servers') == true)">
    <node name="joint_trajectory_server_emulator" pkg="panda_sim_custom_action_server"
	  type="start_joint_trajectory_server.py" />

    <group if="$(eval arg('load_gripper') == true)">
      <node name="gripper_action_server_emulator" pkg="panda_sim_custom_action_server"
	    type="start_gripper_action_server.py" />
    </group>  
    <group if="$(eval arg('start_moveit') == true)">
       <include file="$(find panda_sim_moveit)/launch/sim_move_group.launch">
          <arg name="load_gripper" value="$(arg load_gripper)" />
          <arg name="info"         value="true" />
       </include>
    </group>
  </group>  
  <group if="$(eval arg('load_demo_planning_scene') == true)">
    <node name="demo_scene_loader" pkg="franka_moveit" type="create_demo_planning_scene.py"
	  respawn="false" output="screen" />
  </group> 

</launch>
